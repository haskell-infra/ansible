# HaskellWiki
define service {
  host_name new-www.haskell.org
  service_description HaskellWiki - HTTP
  check_command check_website!www.haskell.org!/haskellwiki/Haskell!purely-functional
  use website_template
}

define service {
  host_name new-www.haskell.org
  service_description HaskellWiki - HTTPS
  check_command check_website_ssl!www.haskell.org!/haskellwiki/Haskell!purely-functional
  use website_template
}

# Hackage
define service {
  host_name hackage.haskell.org
  service_description Hackage HTTP
  check_command check_website!hackage.haskell.org!/packages/!lens
  use website_template
}

define service {
  host_name hackage.haskell.org
  service_description Hackage HTTPS
  check_command check_website_ssl!hackage.haskell.org!/packages/!lens
  use website_template
}

# Mailman
define service {
  host_name new-www.haskell.org
  service_description Mailman HTTP
  check_command check_website!www.haskell.org!/mailman/listinfo/!Haskell-Cafe
  use website_template
}

define service {
  host_name new-www.haskell.org
  service_description Mailman HTTPS
  check_command check_website_ssl!www.haskell.org!/mailman/listinfo/!Haskell-Cafe
  use website_template
}

# GHC
define service {
  host_name new-www.haskell.org
  service_description GHC HTTP
  check_command check_website!www.haskell.org!/ghc/!The GHC Team
  use website_template
}

define service {
  host_name new-www.haskell.org
  service_description GHC HTTPS
  check_command check_website_ssl!www.haskell.org!/ghc/!The GHC Team
  use website_template
}

define service {
  host_name ghc.haskell.org
  service_description GHC Trac HTTPS
  check_command check_website_ssl!ghc.haskell.org!/trac/ghc!GHC Developer Wiki
  use website_template
}

# Subdirectories on new-www
define service {
  host_name new-www.haskell.org
  service_description Haskell Platform HTTP
  check_command check_website!www.haskell.org!/platform/!Current release
  use website_template
}

define service {
  host_name new-www.haskell.org
  service_description Hoogle HTTP
  check_command check_website!www.haskell.org!/hoogle/!Haskell API search engine
  use website_template
}

define service {
  host_name new-www.haskell.org
  service_description Cabal HTTP
  check_command check_website_ssl!www.haskell.org!/cabal/!The Haskell Cabal
  use website_template
}

define service {
  host_name new-www.haskell.org
  service_description Haddock HTTP
  check_command check_website!www.haskell.org!/haddock/!A Haskell Documentation Tool
  use website_template
}

define service {
  host_name new-www.haskell.org
  service_description GHC HTTPS
  check_command check_website_ssl!www.haskell.org!/ghc/!The GHC Team
  use website_template
}

# Gitweb
define service {
  host_name ghc.haskell.org
  service_description Gitweb HTTP
  check_command check_website!git.haskell.org!/!ghc.git
  use website_template
}

define service {
  host_name ghc.haskell.org
  service_description Gitweb HTTPS
  check_command check_website_ssl!git.haskell.org!/!ghc.git
  use website_template
}

# Darcs
define service {
  host_name darcs.haskell.org
  service_description Darcs HTTP
  check_command check_website!darcs.haskell.org!/!robots.txt
  use website_template
}

# CVS
define service {
  host_name abbot.haskell.org
  service_description CVS HTTP
  check_command check_website!cvs.haskell.org!/!CVSROOT
  use website_template
}

# Community
define service {
  host_name community.haskell.org
  service_description Code/Community HTTP
  check_command check_website!code.haskell.org!/!Haskell community service
  use website_template
}

define service {
  host_name community.haskell.org
  service_description Trac HTTP
  check_command check_website!trav.haskell.org!/!Available Projects
  use website_template
}

define service {
  host_name community.haskell.org
  service_description Trac HTTP
  check_command check_website!trac.haskell.org!/!Available Projects
  use website_template
}

define service {
  host_name community.haskell.org
  service_description Projects HTTP
  check_command check_website!projects.haskell.org!/!robots.txt
  use website_template
}

define service {
  host_name community.haskell.org
  service_description Planet HTTP
  check_command check_website!planet.haskell.org!/!channelgroup
  use website_template
}

define service {
  host_name community.haskell.org
  service_description RT HTTP
  check_command check_website!rt.haskell.org!/!Password
  use website_template
}

# Daily builds
define service {
  host_name deb.haskell.org
  service_description Debian Dailies Repo HTTP
  check_command check_website!deb.haskell.org!/!daily builds
  use website_template
}

# SSL Certs
define service {
  host_name new-www.haskell.org
  service_description haskell.org SSL Cert
  check_command check_ssl_cert!haskell.org!60
  use generic-service
}

# And the wildcard cert
define service {
  host_name hackage.haskell.org
  service_description ___.haskell.org Wildcard SSL Cert
  check_command check_ssl_cert!hackage.haskell.org!60
  use generic-service
}
